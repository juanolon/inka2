<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="316" time="0.510" timestamp="2023-06-11T08:08:19.958351" hostname="surfer-172-29-6-237-hotspot.internet-for-guests.com"><testcase classname="tests.test_anki_media" name="test_file_exists_returns_true" time="0.007" /><testcase classname="tests.test_anki_media" name="test_file_does_not_exist_returns_false" time="0.001" /><testcase classname="tests.test_anki_media" name="test_copying_non_existing_file_raises_error" time="0.000" /><testcase classname="tests.test_anki_media" name="test_copying_file_when_no_file_with_same_name_in_anki_media" time="0.001" /><testcase classname="tests.test_anki_media" name="test_copying_file_when_exists_different_file_with_same_name_raises_error" time="0.001" /><testcase classname="tests.test_anki_media" name="test_copying_file_when_exists_same_file_with_same_name" time="0.001" /><testcase classname="tests.test_anki_media" name="test_creating_file_when_no_file_with_same_name_in_anki_media" time="0.001" /><testcase classname="tests.test_anki_media" name="test_creating_file_when_exists_file_with_same_name_in_anki_media" time="0.000" /><testcase classname="tests.test_basic_note" name="test_search_query" time="0.000" /><testcase classname="tests.test_basic_note" name="test_convert_fields_to_html_when_function_passed" time="0.000" /><testcase classname="tests.test_basic_note" name="test_update_fields_with_when_function_passed" time="0.000" /><testcase classname="tests.test_basic_note" name="test_get_raw_fields" time="0.000" /><testcase classname="tests.test_basic_note" name="test_get_raw_question_field" time="0.000" /><testcase classname="tests.test_basic_note" name="test_get_html_fields" time="0.002" /><testcase classname="tests.test_basic_note" name="test_get_anki_note_type" time="0.001" /><testcase classname="tests.test_basic_note" name="test_eq_when_same" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[second_note0]" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[second_note1]" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[second_note2]" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[second_note3]" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[None]" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[second_note5]" time="0.000" /><testcase classname="tests.test_basic_note" name="test_eq_when_not_equal[short string]" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_search_query" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_convert_fields_to_html_when_function_passed" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_update_fields_with_when_function_passed" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_get_raw_fields" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_get_raw_question_field" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_get_html_fields" time="0.001" /><testcase classname="tests.test_cloze_note" name="test_get_anki_note_type" time="0.001" /><testcase classname="tests.test_cloze_note" name="test_eq_when_same" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_eq_when_not_equal[second_note0]" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_eq_when_not_equal[second_note1]" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_eq_when_not_equal[second_note2]" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_eq_when_not_equal[None]" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_eq_when_not_equal[second_note4]" time="0.000" /><testcase classname="tests.test_cloze_note" name="test_eq_when_not_equal[short string]" time="0.000" /><testcase classname="tests.test_config" name="test_saves_correctly" time="0.001" /><testcase classname="tests.test_config" name="test_reads_correctly_from_existing_config" time="0.001" /><testcase classname="tests.test_config" name="test_create_default_config" time="0.001" /><testcase classname="tests.test_config" name="test_if_config_not_found_created_default" time="0.001" /><testcase classname="tests.test_config" name="test_get_entry_value" time="0.001" /><testcase classname="tests.test_config" name="test_get_entry_value_with_incorrect_section_raises_error" time="0.001" /><testcase classname="tests.test_config" name="test_get_entry_value_with_incorrect_key_raises_error" time="0.001" /><testcase classname="tests.test_config" name="test_updates_entry_value_in_backing_object" time="0.001" /><testcase classname="tests.test_config" name="test_updates_entry_value_in_file" time="0.001" /><testcase classname="tests.test_config" name="test_update_option_value_with_incorrect_section_raises_error" time="0.001" /><testcase classname="tests.test_config" name="test_update_option_value_with_incorrect_key_raises_error" time="0.001" /><testcase classname="tests.test_config" name="test_repr_method" time="0.001" /><testcase classname="tests.test_config" name="test_reset" time="0.001" /><testcase classname="tests.test_config" name="test_new_options_removed_by_reset" time="0.001" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {cloze question}-Some {{c1::cloze question}}]" time="0.001" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {cloze question::really helpful hint}-Some {{c1::cloze question::really helpful hint}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {cloze question}\n\n{another} one-Some {{c1::cloze question}}\n\n{{c2::another}} one]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: {$\\sqrt{2}$}-math: {{c1::$\\sqrt{2}$}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: {$$\\frac{\\sqrt{2}}{15}$$}-math: {{c1::$$\\frac{\\sqrt{2}}{15}$$}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[inline code: {`func() int { return {12} }`}-inline code: {{c1::`func() int { return {12} }`}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Code:\n{\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n}\n-Code:\n{{c1::\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n}}\n]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[some math {$\\sqrt{2}$}, code {`func() int`}, more code {`defer resp.body.Close()`} and more math {$\\frac{1}{5}$}-some math {{c1::$\\sqrt{2}$}}, code {{c2::`func() int`}}, more code {{c3::`defer resp.body.Close()`}} and more math {{c4::$\\frac{1}{5}$}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $\\sqrt{2}$-math: $\\sqrt{2}$]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $$\\frac{\\sqrt{2}}{15}$$-math: $$\\frac{\\sqrt{2}}{15}$$]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[inline code: `func() int { return {12} }`-inline code: `func() int { return {12} }`]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Code:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n-Code:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {1::cloze question}-Some {{c1::cloze question}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {1::cloze question::really helpful hint}-Some {{c1::cloze question::really helpful hint}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {c1::cloze question}-Some {{c1::cloze question}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {2::cloze question}\n\n{1::another} one-Some {{c2::cloze question}}\n\n{{c1::another}} one]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: {1::$\\sqrt{2}$}-math: {{c1::$\\sqrt{2}$}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: {1::$$\\frac{\\sqrt{2}}{15}$$}-math: {{c1::$$\\frac{\\sqrt{2}}{15}$$}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[inline code: {1::`func() int { return {12} }`}-inline code: {{c1::`func() int { return {12} }`}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Code:\n{1::\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n}\n-Code:\n{{c1::\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n}}\n]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $\\sqrt{2::15}$-math: $\\sqrt{2::15}$]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $$\\frac{1::\\sqrt{2}}{12::15}$$-math: $$\\frac{1::\\sqrt{2}}{12::15}$$]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[inline code: `func() int { return {1::12} }`-inline code: `func() int { return {1::12} }`]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Code:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;{1::exited}&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n-Code:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;{1::exited}&quot;) }\n\tdatabase.DB, err := sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {{c1::cloze question}}-Some {{c1::cloze question}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {{c1::cloze question::really helpful hint}}-Some {{c1::cloze question::really helpful hint}}]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Some {{c2::cloze question}}\n\n{{c1::another}} one-Some {{c2::cloze question}}\n\n{{c1::another}} one]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $\\sqrt{ {{c1::15}} } $-math: $\\sqrt{ {{c1::15}} } $]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $$\\frac{ {{1::\\sqrt{2}}} }{ {{c12::15}} }$$-math: $$\\frac{ {{1::\\sqrt{2}}} }{ {{c12::15}} }$$]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[math: $\\sqrt{ {{c1::15}} } $ $$\\frac{ {{1::\\sqrt{2}}} }{ {{c12::15}} }$$-math: $\\sqrt{ {{c1::15}} } $ $$\\frac{ {{1::\\sqrt{2}}} }{ {{c12::15}} }$$]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[inline code: `func() int { return {{c1::12}} }`-inline code: `func() int { return {{c1::12}} }`]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Code:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := {{c1::sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))}}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n-Code:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := {{c1::sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))}}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[Code of `{simple} {{c2::function}}`:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := {{c1::sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))}}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n-Code of `{simple} {{c2::function}}`:\n```\nfunc main() {\n\tdefer func() { fmt.Println(&quot;exited&quot;) }\n\tdatabase.DB, err := {{c1::sql.Open(&quot;pgx&quot;, os.Getenv(&quot;POSTGRES_URL&quot;))}}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[{Paris} is the capital and most populous city of {2::France}, with a estimated population of {2,148,271} residents-{{c1::Paris}} is the capital and most populous city of {{c2::France}}, with a estimated population of {{c3::2,148,271}} residents]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[{Paris} is the capital and most populous city of {3::France}, with a estimated population of {2,148,271} residents-{{c1::Paris}} is the capital and most populous city of {{c3::France}}, with a estimated population of {{c3::2,148,271}} residents]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format[{c3::Paris} is the capital and most populous city of {3::France}, with a {{c1::estimated::my hint}} population of {2,148,271} residents-{{c3::Paris}} is the capital and most populous city of {{c3::France}}, with a {{c1::estimated::my hint}} population of {{c4::2,148,271}} residents]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cloze_deletions_to_anki_format_works_with_multiple_notes" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[some text here-&lt;p&gt;some text here&lt;/p&gt;]" time="0.004" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[1. Item1\n2. Item2\n3. Item3\n\n```javascript\nlet a = 12;\nlet b = a;\n```\n\n[google](https://google.com)\n-&lt;ol&gt;&lt;li&gt;Item1&lt;/li&gt;&lt;li&gt;Item2&lt;/li&gt;&lt;li&gt;Item3&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = 12;\nlet b = a;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://google.com&quot;&gt;google&lt;/a&gt;&lt;/p&gt;]" time="0.001" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[some text here\nand more text-&lt;p&gt;some text here\nand more text&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[some text here\n\nmore text-&lt;p&gt;some text here&lt;/p&gt;&lt;p&gt;more text&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$\\sqrt{5}$-&lt;p&gt;\\(\\sqrt{5}\\)&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$\\sqrt{5} $-&lt;p&gt;\\(\\sqrt{5} \\)&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$ \\sqrt{5}$-&lt;p&gt;\\( \\sqrt{5}\\)&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$multiple words$-&lt;p&gt;\\(multiple words\\)&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[weird$mathjax$more word$1$s-&lt;p&gt;weird\\(mathjax\\)more word\\(1\\)s&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$\\sqrt{5}\n$-&lt;p&gt;$\\sqrt{5}\n$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$\n\\sqrt{5}$-&lt;p&gt;$\n\\sqrt{5}$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[\\$\\sqrt{5}$-&lt;p&gt;$\\sqrt{5}$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$\\sqrt{5}\\$-&lt;p&gt;$\\sqrt{5}$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[\\$\\sqrt{5}\\$-&lt;p&gt;$\\sqrt{5}$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[text $$ here-&lt;p&gt;text \\(\\) here&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[\\$$$$-&lt;p&gt;$\\(\\)$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[\\$$\\sqrt{2}$$-&lt;p&gt;$\\(\\sqrt{2}\\)$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$\\$\\sqrt{2}$$-&lt;p&gt;\\(\\$\\sqrt{2}\\)$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\\sqrt{2}\\$$-&lt;p&gt;\\(\\)\\sqrt{2}$$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\\sqrt{2}$\\$-&lt;p&gt;\\(\\)\\sqrt{2}$$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[\\$\\$\\sqrt{2}$$-&lt;p&gt;$$\\sqrt{2}\\(\\)&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\\sqrt{2}\\$\\$-&lt;p&gt;\\(\\)\\sqrt{2}$$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$$-&lt;p&gt;\\(\\)$&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$$$-&lt;p&gt;\\[\\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\\sqrt{2}$$-&lt;p&gt;\\[\\sqrt{2}\\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[inside $$\\sqrt{2}$$ text-&lt;p&gt;inside \\[\\sqrt{2}\\] text&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$ text here $$-&lt;p&gt;\\[ text here \\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$multi\nline$$-&lt;p&gt;\\[multi\nline\\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\n\\sqrt{2}\n\\frac{1}{2}\n$$-&lt;p&gt;\\[\n\\sqrt{2}\n\\frac{1}{2}\n\\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\\sqrt{2}$$ some text in between $$\n\\sqrt{2}\n\\frac{1}{2}\n$$-&lt;p&gt;\\[\\sqrt{2}\\] some text in between \\[\n\\sqrt{2}\n\\frac{1}{2}\n\\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_md_to_html[$$\\sqrt{2}$$ some text $\\sqrt{6}$ in between $$\n\\sqrt{2}\n\\frac{1}{2}\n$$-&lt;p&gt;\\[\\sqrt{2}\\] some text \\(\\sqrt{6}\\) in between \\[\n\\sqrt{2}\n\\frac{1}{2}\n\\]&lt;/p&gt;]" time="0.000" /><testcase classname="tests.test_converter" name="test_convert_cards_to_html_works_with_multiple_cards" time="0.000" /><testcase classname="tests.test_hasher" name="test_calculate_hash_when_file_exists" time="0.001" /><testcase classname="tests.test_hasher" name="test_calculate_hash_when_file_does_not_exist_raises_error" time="0.000" /><testcase classname="tests.test_hasher" name="test_has_changed_when_file_hash_exists_in_data_file_and_hash_same" time="0.001" /><testcase classname="tests.test_hasher" name="test_has_changed_when_file_hash_exists_in_data_file_and_hashes_different" time="0.001" /><testcase classname="tests.test_hasher" name="test_has_changed_when_file_hash_does_not_exist_in_data_file" time="0.001" /><testcase classname="tests.test_hasher" name="test_update_hash_when_file_hash_exists_in_data_file" time="0.001" /><testcase classname="tests.test_hasher" name="test_update_hash_when_file_hash_does_not_exist_in_data_file" time="0.001" /><testcase classname="tests.test_hasher" name="test_reset_hashes_when_data_file_does_not_exist" time="0.000" /><testcase classname="tests.test_hasher" name="test_reset_hashes_when_data_file_contains_hashes" time="0.001" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_when_style_is_empty_string_raises_error" time="0.001" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_uses_anki_api_to_get_current_style" time="0.003" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_uses_requests_to_download_style" time="0.002" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_skips_when_same_style_already_exists" time="0.001" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_when_incorrect_style_requested_raises_error" time="0.086" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_when_no_highlight_style_generates_new_with_one" time="0.003" /><testcase classname="tests.test_highlight" name="test_update_style_in_note_type_when_exists_different_highlight_style_replaces_it" time="0.003" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_when_no_script_in_anki_media_downloads_one" time="0.004" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_when_script_exists_in_anki_media_does_not_download_one" time="0.003" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_adds_scripts_to_front_and_back_of_note_type" time="0.002" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_when_front_of_note_type_has_scripts_does_not_add_more_to_it" time="0.002" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_when_back_of_note_type_has_scripts_does_not_add_more_to_it" time="0.002" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_if_fields_have_not_change_no_update_request_sent" time="0.002" /><testcase classname="tests.test_highlight" name="test_handle_highlighjs_script_adds_scripts_to_multiple_templates" time="0.002" /><testcase classname="tests.test_img_handler" name="test_fetch_image_links_if_cards_do_not_have_images" time="0.000" /><testcase classname="tests.test_img_handler" name="test_fetch_image_links_if_cards_have_images" time="0.000" /><testcase classname="tests.test_img_handler" name="test_fetch_image_links_if_cards_have_same_image" time="0.000" /><testcase classname="tests.test_img_handler" name="test_update_image_links_when_no_image_links" time="0.000" /><testcase classname="tests.test_img_handler" name="test_update_image_links_when_basic_card_has_image_link" time="0.000" /><testcase classname="tests.test_img_handler" name="test_update_image_links_when_cloze_card_has_image_link" time="0.000" /><testcase classname="tests.test_img_handler" name="test_update_image_links_when_card_has_different_image_links" time="0.000" /><testcase classname="tests.test_img_handler" name="test_update_image_links_in_several_basic_cards_with_same_images" time="0.000" /><testcase classname="tests.test_img_handler" name="test_update_image_links_when_basic_and_cloze_notes" time="0.000" /><testcase classname="tests.test_img_handler" name="test_copy_images_to_with_one_image_link" time="0.001" /><testcase classname="tests.test_img_handler" name="test_copy_images_to_with_multiple_image_links" time="0.001" /><testcase classname="tests.test_img_handler" name="test_copy_images_to_with_non_existing_image_raises_error" time="0.000" /><testcase classname="tests.test_img_handler" name="test_copy_images_to_when_exists_different_image_with_same_name_raises_error" time="0.001" /><testcase classname="tests.test_img_handler" name="test_handle_images_if_no_images_then_fields_remain_same" time="0.000" /><testcase classname="tests.test_img_handler" name="test_handle_images_when_cards_have_images" time="0.001" /><testcase classname="tests.test_img_handler" name="test_handle_images_copies_images_to_anki_media" time="0.001" /><testcase classname="tests.test_note" name="test_escapes_colon[$\\sqrt{5}$-&quot;$\\\\sqrt{5}$&quot;]" time="0.000" /><testcase classname="tests.test_note" name="test_escapes_colon[text and &quot;quote&quot;-&quot;text and \\&quot;quote\\&quot;&quot;]" time="0.000" /><testcase classname="tests.test_note" name="test_escapes_colon[I have some_long_name in here-&quot;I have some\\_long\\_name in here&quot;]" time="0.000" /><testcase classname="tests.test_note" name="test_escapes_colon[I like: colons a:b:c, yeah-&quot;I like\\: colons a\\:b\\:c, yeah&quot;]" time="0.000" /><testcase classname="tests.test_note" name="test_escapes_colon[We have (much) to say-&quot;We have (much) to say&quot;]" time="0.000" /><testcase classname="tests.test_note" name="test_escapes_colon[The hyphen - is a punctuation mark-&quot;The hyphen - is a punctuation mark&quot;]" time="0.000" /><testcase classname="tests.test_writer" name="test_update_ids_saves_to_file_system" time="0.001" /><testcase classname="tests.test_writer" name="test_update_ids_skips_card_if_it_was_not_found" time="0.001" /><testcase classname="tests.test_writer" name="test_update_ids_does_not_add_id_if_it_no_id_in_card" time="0.001" /><testcase classname="tests.test_writer" name="test_update_ids_removes_id_from_file_if_card_object_has_no_id" time="0.001" /><testcase classname="tests.test_writer" name="test_update_ids_writes_id_before_question" time="0.001" /><testcase classname="tests.test_writer" name="test_updates_id_if_another_is_written" time="0.001" /><testcase classname="tests.test_writer" name="test_update_card_fields_saves_to_file_system" time="0.001" /><testcase classname="tests.test_writer" name="test_update_card_fields_skips_not_changed_cards" time="0.001" /><testcase classname="tests.test_writer" name="test_updates_question_field" time="0.001" /><testcase classname="tests.test_writer" name="test_updates_multiline_question_field" time="0.001" /><testcase classname="tests.test_writer" name="test_updates_answer_field" time="0.001" /><testcase classname="tests.test_writer" name="test_updates_multiline_answer_field" time="0.001" /><testcase classname="tests.test_writer" name="test_delete_saves_changes_to_file_system" time="0.001" /><testcase classname="tests.test_writer" name="test_delete_skips_cards_that_are_not_marked_for_deletion" time="0.001" /><testcase classname="tests.test_writer" name="test_deletes_card_marked_for_deletion" time="0.001" /><testcase classname="tests.test_writer" name="test_deletes_multiple_cards_marked_for_deletion" time="0.001" /><testcase classname="tests.test_writer" name="test_update_cloze_notes_saves_to_file_system" time="0.001" /><testcase classname="tests.test_writer" name="test_update_cloze_notes_when_note_has_only_one_line" time="0.001" /><testcase classname="tests.test_writer" name="test_update_cloze_notes_when_note_has_multiple_lines" time="0.001" /><testcase classname="tests.test_writer" name="test_update_cloze_notes_when_multiple_notes_has_changes" time="0.001" /><testcase classname="tests.test_writer" name="test_update_cloze_notes_basic_notes_ignored" time="0.001" /><testcase classname="tests.test_writer" name="test_update_cloze_notes_updates_raw_text_value" time="0.001" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Some answer-Some answer]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Deck: Abraham\n\n1. Some question?\n\n&gt; Answer\n&gt; Additional info\n&gt; \n&gt; And more to it-Answer\n\nAdditional info\n\n\n\nAnd more to it]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Deck: Abraham\n\n1. Some question?\n\n&gt; &gt; Answer\n-&gt; Answer]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123456--&gt;\n1. Some question?\n\n&gt; Answer-Answer]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Deck: Abraham\n\nTags: one two-three\n\n1. A little bit of python code...\n\n&gt; ```python\n&gt; def hello(name: str) -&gt; str:\n&gt;     return f'Hello, {name}!'\n&gt;\n&gt; if __name__ == '__main__':\n&gt;     print(hello('bro'))\n&gt; ```\n&gt; some text-```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    print(hello('bro'))\n```\n\nsome text]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Deck: Abraham\n\nTags: one two-three\n\n1. A little bit of python code...\n\n&gt; Some text before:\n&gt; ```python\n&gt; def hello(name: str) -&gt; str:\n&gt;     return f'Hello, {name}!'\n&gt;\n&gt; if __name__ == '__main__':\n&gt;     print(hello('bro'))\n&gt; ```\n&gt; text in between\n&gt; ```python\n&gt; def hello(name: str) -&gt; str:\n&gt;     return f'Hello, {name}!\n&gt; ```\n&gt;\n&gt; text after\n&gt;\n&gt; ```commandline\n&gt; inka collect -u path/to/file.md\n&gt; ```\n-Some text before:\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    print(hello('bro'))\n```\n\ntext in between\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!\n```\n\n\n\ntext after\n\n\n\n```commandline\ninka collect -u path/to/file.md\n```]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $\n&gt; X^{2}\n&gt; $-$\n\nX^{2}\n\n$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$\n&gt; X^{2}\n&gt; $-\\$\n\nX^{2}\n\n$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $\n&gt; X^{2}\n&gt; \\$-$\n\nX^{2}\n\n\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $$\n&gt; X^{2}\n&gt; $$-$$\nX^{2}\n$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$$\n&gt; X^{2}\n&gt; $$-\\$$\n\nX^{2}\n\n$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $\\$\n&gt; X^{2}\n&gt; $$-$\\$\n\nX^{2}\n\n$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $$\n&gt; X^{2}\n&gt; \\$$-$$\n\nX^{2}\n\n\\$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $$\n&gt; X^{2}\n&gt; $\\$-$$\n\nX^{2}\n\n$\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$\\$\n&gt; X^{2}\n&gt; $$-\\$\\$\n\nX^{2}\n\n$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$$\n&gt; X^{2}\n&gt; \\$$-\\$$\n\nX^{2}\n\n\\$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$$\n&gt; X^{2}\n&gt; $\\$-\\$$\n\nX^{2}\n\n$\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $\\$\n&gt; X^{2}\n&gt; \\$$-$\\$\n\nX^{2}\n\n\\$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $\\$\n&gt; X^{2}\n&gt; $\\$-$\\$\n\nX^{2}\n\n$\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$\\$\n&gt; X^{2}\n&gt; \\$$-\\$\\$\n\nX^{2}\n\n\\$$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$\\$\n&gt; X^{2}\n&gt; $\\$-\\$\\$\n\nX^{2}\n\n$\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; $\\$\n&gt; X^{2}\n&gt; \\$\\$-$\\$\n\nX^{2}\n\n\\$\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[&gt; \\$\\$\n&gt; X^{2}\n&gt; \\$\\$-\\$\\$\n\nX^{2}\n\n\\$\\$]" time="0.000" /><testcase classname="tests.parser.test_get_cleaned_answer" name="test_get_answer[Some text-None]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name[1. Question?\n\nAnswer\n-Default]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name[Deck: yolo\n1. Question?\n\nAnswer\n-yolo]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name[Deck: Very Long Deck Name\n1. Question?\n\nAnswer\n-Very Long Deck Name]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name[1. Question?\n\nAnswer\n\nDeck: yolo\n\n2. Q?\n\nA\n-yolo]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name[Some text; Deck: yolo\n1. Question?\n\nAnswer\n-Default]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name_raises_error[Some text; Deck: yolo\n1. Question?\n\nAnswer\n]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name_raises_error[Deck: Abraham\n1. Question?\n\nDeck: Default\nAnswer\n]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name_raises_error[1. Question?\n\nAnswer\n]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name_raises_error[Deck:\n1. Question?\n\nAnswer\n]" time="0.000" /><testcase classname="tests.parser.test_get_deck_name" name="test_get_deck_name_raises_error[Deck:   \n1. Question?\n\nAnswer\n]" time="0.000" /><testcase classname="tests.parser.test_get_id" name="test_get_id[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:1235523--&gt;\n1. Some question?\n\n&gt; Answer-1235523]" time="0.000" /><testcase classname="tests.parser.test_get_id" name="test_get_id[&lt;!--ID:215321--&gt;\n1. Some question?\n\n&gt; Answer-215321]" time="0.000" /><testcase classname="tests.parser.test_get_id" name="test_get_id[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer-None]" time="0.000" /><testcase classname="tests.parser.test_get_id" name="test_get_id[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:--&gt;\n1. Some question?\n\n&gt; Answer-None]" time="0.000" /><testcase classname="tests.parser.test_get_id" name="test_get_id[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123a--&gt;\n1. Some question?\n\n&gt; Answer-None]" time="0.000" /><testcase classname="tests.parser.test_get_id" name="test_get_id[&lt;!--ID:1612579125074--&gt;\n32. Some {question?}\n\n-1612579125074]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[-expected0]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer-expected1]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\n1. Some question?\n&gt; Answer-expected2]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer\n\n2. Q\n\n&gt; A-expected3]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\n1. Some question?\n\n&gt; Answer\n2. Q\n\n&gt; A-expected4]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\n1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer-expected5]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\n1. Some question?\n\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it-expected6]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\n1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it-expected7]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n2. Another question\n\n&gt; Answer-expected8]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123456--&gt;\n1. Some question?\n\n&gt; Answer-expected9]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123456--&gt;\n1. Some question?\n\n&gt; Answer\n\n&lt;!--ID:581925--&gt;\n2. Q\n\n&gt; A-expected10]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\n-expected11]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123456--&gt;\n1. Some {question} here?\n\n-expected12]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n-expected13]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n2. {1::another} here?\n\n-expected14]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:1612509025074--&gt;\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n&lt;!--ID:1612509015034--&gt;\n2. {1::another} here?\n\n-expected15]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n2. Some question?\n\n&gt; Answer\n\n3. {1::another} here?\n\n-expected16]" time="0.000" /><testcase classname="tests.parser.test_get_note_strings" name="test_get_note_strings[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer\n\n2. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n3. Question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it\n\n-expected17]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n-expected0]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\nTags: some tags here-expected1]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\n1. Some question?\n\n&gt; Answer-expected2]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer-expected3]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\n1. Some question?\n\n&gt; Answer\n\n2. Q\n\n&gt; A-expected4]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer\n\n2. Q\n\n&gt; A-expected5]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\n-expected6]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123456--&gt;\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n\n-expected7]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n2. {1::another} here?\n\n-expected8]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:1612509025074--&gt;\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n&lt;!--ID:1612509015034--&gt;\n2. {1::another} here?\n\n-expected9]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n1. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n2. Some question?\n\n&gt; Answer\n\n3. {1::another} here?\n\n-expected10]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer\n\n2. Some {question} here?\n\nMore info on question.\n\nAnd even more!\n3. Question?\n\nMore info on question.\n\nAnd even more!\n\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; And more to it\n\n4. Where am I?\n\n-expected11]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\n1. \n\n&gt; -expected12]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\n1. not empty \n\n&gt; -expected13]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\n1. \n\n&gt; not empty-expected14]" time="0.000" /><testcase classname="tests.parser.test_get_notes_from_section" name="test_get_notes_from_section[Deck: Abraham\n\n1. \n-expected15]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\nTags: one two-three\n\n1. Some question?\n\n&gt; Answer-Some question?]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\nTags: one two-three\n\n12. Some question?\n\n&gt; Answer-Some question?]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\nTags: one two-three\n\n123. Some question?\n\n&gt; Answer-Some question?]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\n1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer-Some question?\n\nMore info on question.\n\nAnd even more!]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\nTags: one two-three\n\n&lt;!--ID:123456--&gt;\n1. Some question?\n\n&gt; Answer-Some question?]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\nTags: one two-three\n\n1. A little bit of python code...\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    print(hello('bro'))\n```\n\n&gt; some text-A little bit of python code...\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    print(hello('bro'))\n```]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Deck: Abraham\n\nTags: one two-three\n\n1. Some text before:\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    print(hello('bro'))\n```\n\ntext in between\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!\n```\n\ntext after\n\n```commandline\ninka collect -u path/to/file.md\n```\n\n&gt; Short answer\n&gt; here-Some text before:\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!'\n\nif __name__ == '__main__':\n    print(hello('bro'))\n```\n\ntext in between\n\n```python\ndef hello(name: str) -&gt; str:\n    return f'Hello, {name}!\n```\n\ntext after\n\n```commandline\ninka collect -u path/to/file.md\n```]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[1. Some {question?}\n\n-Some {question?}]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[2. Some {{c1::question?}}\n\n-Some {{c1::question?}}]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[&lt;!--ID:1612579125074--&gt;\n32. Some {question?}\n\n-Some {question?}]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[1. Some {question?}\n\nMore {{c1::info on question}}.\n\n{1::And::hint} even more!-Some {question?}\n\nMore {{c1::info on question}}.\n\n{1::And::hint} even more!]" time="0.000" /><testcase classname="tests.parser.test_get_question" name="test_get_question[Some text-None]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[-expected0]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[First lineSecond line\t 123 51-expected1]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\n----expected2]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---123\nNot empty\n----expected3]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\nNot empty\na----expected4]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\nNot empty\nOk-expected5]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\nText inside section\n----expected6]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\nFirst\nSecond\nThird\n----expected7]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\nFirst one\n---\n---\nSecond one\n----expected8]" time="0.000" /><testcase classname="tests.parser.test_get_sections" name="test_get_sections[---\nFirst one\n---\nSome text in between\n---\nSecond one\n----expected9]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags[1. Question?\n\nAnswer\n-expected0]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags[Tags:\n1. Question?\n\nAnswer\n-expected1]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags[Tags: yolo\n1. Question?\n\nAnswer\n-expected2]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags[Tags: yolo abc new1\n1. Question?\n\nAnswer\n-expected3]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags[1. Question?\n\nAnswer\n\nTags: yolo\n\n2. Q?\n\nA\n-expected4]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags[Some text; Tags: yolo abc new1\n1. Question?\n\nAnswer\n-expected5]" time="0.000" /><testcase classname="tests.parser.test_get_tags" name="test_get_tags_when_section_with_multiple_tag_fields_raises_error" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some question?\n\n&gt; Answer-True]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some {question}?\n\n&gt; Answer-True]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[&lt;!--ID:1612509025074--&gt;\n1. Some question?\n\n&gt; Answer-True]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer-True]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some question?\n\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it-True]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it-True]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some {question?}\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[2. Some {{c1::question?}}\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[&lt;!--ID:1612579125074--&gt;\n32. Some {question?}\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[1. Some {question?}\n\nMore {{c1::info on question}}.\n\n{1::And::hint} even more!-False]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[3. Some question?\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[&lt;!--ID:1112809025074--&gt;\n3. Some question?\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_basic_note_str" name="test_is_basic_note_str[-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some question?\n\n&gt; Answer-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[&lt;!--ID:1612509025074--&gt;\n1. Some question?\n\n&gt; Answer-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some question?\n\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some question?\n\nMore info on question.\n\nAnd even more!\n&gt; Answer\n&gt; \n&gt; Additional info\n&gt; \n&gt; And more to it-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some {question?}\n\n-True]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[2. Some {{c1::question?}}\n\n-True]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[&lt;!--ID:1612579125074--&gt;\n32. Some {question?}\n\n-True]" time="0.001" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some {question?}\n\nMore {{c1::info on question}}.\n\n{1::And::hint} even more!-True]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[3. Some question?\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[&lt;!--ID:1112809025074--&gt;\n3. Some question?\n\n-False]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[1. Some {question}?\n\n&gt; Answer-True]" time="0.000" /><testcase classname="tests.parser.test_is_cloze_note_str" name="test_is_cloze_note_str[-False]" time="0.002" /></testsuite></testsuites>